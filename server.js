const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const shortid = require("shortid");  
  
// create server using express
const app = express(); 
app.use(bodyParser.json()); 

app.use("/", express.static(__dirname + "/build"));
//app.get("/", (req, res) => res.sendFile(__dirname + "/build/index.html"));

// init mongo databae
mongoose.connect("mongodb://localhost/react-shopping-cart-db", {
    useNewUrlParser: true,
    useCreateIndex: true,
    useUnifiedTopology: true,
});  
// define product model
const Product = mongoose.model("products", new mongoose.Schema({ // create new product using schema
    _id : {type: String, default: shortid.generate}, //auto generated by shortid library
    title: String,
    description: String,
    image: String,
    price: String,
    availableSizes: [ String ]
    })
); 

// HTTP GET METHOD
app.get("/api/products", async (req, res) => {
    const products = await Product.find({}); //get all products    
    res.send(products);
});  
// HTTP POST METHOD
app.post("/api/products", async (req,res) => {
    const newProduct = new Product(req.body);
    const savedProduct = await newProduct.save();
    res.send(savedProduct);
});
// HTTP DELETE METHOD
app.delete("/api/products/:id", async(req, res) => {
   const deletedProduct = await Product.findByIdAndDelete(req.params.id);
   res.send(deletedProduct); 
});
 
const port = process.env.PORT || 3000;
app.listen(port, () => console.log("serve at http://localhost:3000/")); 